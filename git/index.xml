<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gits on 我的博客</title>
    <link>https://eightyoliveira.github.io/git/</link>
    <description>Recent content in Gits on 我的博客</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 04 Jul 2025 08:09:43 +0800</lastBuildDate>
    <atom:link href="https://eightyoliveira.github.io/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 撤回已 push 的注意事项</title>
      <link>https://eightyoliveira.github.io/git/git%E6%92%A4%E5%9B%9E%E5%B7%B2push%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 04 Jul 2025 08:09:43 +0800</pubDate>
      <guid>https://eightyoliveira.github.io/git/git%E6%92%A4%E5%9B%9E%E5%B7%B2push%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git revert&lt;/code&gt; 适合提交已经被推送到远程分支，适合公共分支，需要保留项目历史记录以便追踪问题。&lt;/li&gt;
&lt;li&gt;如果其他人已经拉取了你要撤销的提交，请优先使用 &lt;code&gt;git revert&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt; 会重写提交历史，特别是在使用 &lt;code&gt;--hard&lt;/code&gt; 或 &lt;code&gt;--force&lt;/code&gt; 参数时。如果你执行了 &lt;code&gt;git push --force&lt;/code&gt;，可能会覆盖远程分支的历史，影响其他协作者。不适合用于已经推送到远程仓库并被他人拉取的提交。该命令适用于提交仅存在于本地，尚未推送到远程仓库的情况。&lt;/li&gt;
&lt;li&gt;在进行本地调试或清理提交历史时（如 rebase 后）可以使用。&lt;/li&gt;
&lt;li&gt;在执行任何撤销操作前，建议先创建一个新分支或备份当前状态。&lt;/li&gt;
&lt;li&gt;创建临时分支进行测试。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git reset四种模式对比</title>
      <link>https://eightyoliveira.github.io/git/git%E4%B8%ADreset%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94softmixedhardkeep/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/git/git%E4%B8%ADreset%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94softmixedhardkeep/</guid>
      <description>&lt;h2 id=&#34;模式对比表&#34;&gt;模式对比表&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模式（Mode）&lt;/th&gt;
          &lt;th&gt;工作区（Working Directory）&lt;/th&gt;
          &lt;th&gt;暂存区（Staging Area / Index）&lt;/th&gt;
          &lt;th&gt;本地版本库（HEAD）&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--soft&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;不修改&lt;/td&gt;
          &lt;td&gt;不修改&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;只移动 HEAD 指针，不改变暂存区和工作区。适合撤销提交但保留所有更改为已暂存状态。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--mixed&lt;/code&gt;（默认）&lt;/td&gt;
          &lt;td&gt;不修改&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;移动 HEAD 并重置暂存区，但不改变工作区。这是默认行为，适合撤销提交并取消暂存更改，但保留文件内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--hard&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;回退（仅已追踪文件）&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;完全丢弃更改，将 HEAD、暂存区和工作区都恢复到指定提交的状态。&lt;strong&gt;危险操作，会丢失未提交的修改！&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--keep&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;保留 Untracked 文件，回退已追踪文件&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;类似于 &lt;code&gt;--hard&lt;/code&gt;，但不会删除工作区中未被追踪的文件（Untracked）。适用于想保留新添加的文件但丢弃旧更改。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作区（Working Directory）&lt;/strong&gt;&lt;br&gt;
当前你在文件系统中看到的文件状态，也就是你正在编辑的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;暂存区（Staging Area / Index）&lt;/strong&gt;&lt;br&gt;
准备下一次提交的文件快照，通过 &lt;code&gt;git add&lt;/code&gt; 添加到暂存区的更改才会被下次提交包含。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地版本库（Local Repository / HEAD）&lt;/strong&gt;&lt;br&gt;
Git 存储的所有提交历史记录，HEAD 指向当前所在的提交。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用场景建议&#34;&gt;使用场景建议&lt;/h2&gt;
&lt;h3 id=&#34;1-git-reset---soft-head1&#34;&gt;1. &lt;code&gt;git reset --soft HEAD~1&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：撤销最近的一次提交，但保留所有更改为“已暂存”状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：HEAD 被移动，但工作区和暂存区不变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用&lt;/strong&gt;：提交后发现信息写错了，但不想重新添加文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-git-reset---mixed-head1-或-git-reset-head1&#34;&gt;2. &lt;code&gt;git reset --mixed HEAD~1&lt;/code&gt; 或 &lt;code&gt;git reset HEAD~1&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：撤销提交并将更改从暂存区移除（但保留在工作区中）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：HEAD 和暂存区被重置，工作区保持不变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：这是默认行为，无需加 &lt;code&gt;--mixed&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-git-reset---hard-head1&#34;&gt;3. &lt;code&gt;git reset --hard HEAD~1&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：彻底丢弃最近一次提交的所有更改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：HEAD、暂存区和工作区都被重置到上一个提交的状态。&lt;/li&gt;
&lt;li&gt;⚠️ &lt;strong&gt;警告&lt;/strong&gt;：所有未提交的更改都会被永久删除！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-git-reset---keep-head1&#34;&gt;4. &lt;code&gt;git reset --keep HEAD~1&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：想丢弃最近一次提交的更改，但保留工作区中新增的未追踪文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：HEAD 和暂存区被重置，已追踪文件被还原，但未追踪文件保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt;：只改 HEAD，什么都不动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed&lt;/code&gt;：改 HEAD 和暂存区，工作区不动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt;：全部重置，包括工作区（危险！）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--keep&lt;/code&gt;：类似 &lt;code&gt;hard&lt;/code&gt;，但不删未追踪文件。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git Stage、Stash和IDEA Shelve对比</title>
      <link>https://eightyoliveira.github.io/git/gitstage%E5%92%8Cgitstash%E5%92%8Cideashelve%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/git/gitstage%E5%92%8Cgitstash%E5%92%8Cideashelve%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;h1 id=&#34;对比&#34;&gt;对比&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性/功能&lt;/th&gt;
          &lt;th&gt;Git Stage (&lt;code&gt;git add&lt;/code&gt;)&lt;/th&gt;
          &lt;th&gt;Git Stash (&lt;code&gt;git stash&lt;/code&gt;)&lt;/th&gt;
          &lt;th&gt;IDEA Shelve&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;用途&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;将修改添加到暂存区，准备提交&lt;/td&gt;
          &lt;td&gt;暂时保存工作目录和暂存区的更改&lt;/td&gt;
          &lt;td&gt;暂时保存本地未提交的更改&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否持久化保存&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;否（只存在于暂存区中）&lt;/td&gt;
          &lt;td&gt;是（保存为一个 stash 记录）&lt;/td&gt;
          &lt;td&gt;是（保存在 &lt;code&gt;.idea/shelf/&lt;/code&gt; 目录下）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否需要提交历史&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;需要手动执行 &lt;code&gt;git commit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;可通过 &lt;code&gt;apply&lt;/code&gt; 或 &lt;code&gt;pop&lt;/code&gt; 恢复更改&lt;/td&gt;
          &lt;td&gt;可恢复并重新应用更改&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否支持多个更改集合&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;否（一次 stage 对应一次提交）&lt;/td&gt;
          &lt;td&gt;是（可以有多个 stash 条目）&lt;/td&gt;
          &lt;td&gt;是（可保存多个 shelved 更改集）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否影响 Git 状态&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;是（改变暂存区状态）&lt;/td&gt;
          &lt;td&gt;是（保存后工作区变干净）&lt;/td&gt;
          &lt;td&gt;否（不影响 Git 状态，IDE 自定义机制）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;准备提交特定文件或代码片段&lt;/td&gt;
          &lt;td&gt;切换分支前临时保存改动&lt;/td&gt;
          &lt;td&gt;想保留当前未完成的工作以便稍后再继续&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否能部分操作&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;是（可选择性添加某些文件或代码块）&lt;/td&gt;
          &lt;td&gt;是（可通过 patch 操作）&lt;/td&gt;
          &lt;td&gt;是（可选择性地 shelve 部分更改）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;恢复方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提交后自动恢复&lt;/td&gt;
          &lt;td&gt;使用 &lt;code&gt;git stash apply&lt;/code&gt; 或 &lt;code&gt;pop&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在 IDEA 中点击 &amp;ldquo;Unshelve&amp;rdquo; 恢复更改&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;总结建议&#34;&gt;总结建议：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;✅ &lt;strong&gt;Git Stage&lt;/strong&gt;：用于准备提交内容，是 Git 提交流程的一部分。&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;Git Stash&lt;/strong&gt;：适合开发者在命令行环境下快速保存和恢复工作状态。&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;IDEA Shelve&lt;/strong&gt;：适合在 IDEA 中进行复杂的开发任务切换，提供更友好的图形界面和细粒度控制。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git中cherry-pick用法</title>
      <link>https://eightyoliveira.github.io/git/git%E4%B8%ADcherry-pick%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/git/git%E4%B8%ADcherry-pick%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;目的是将 &lt;code&gt;features&lt;/code&gt; (d e提交)分支中的某个特定提交（比如提交 &lt;code&gt;d&lt;/code&gt;）合并到 &lt;code&gt;master&lt;/code&gt; 分支，而另一个提交（比如提交 &lt;code&gt;e&lt;/code&gt;）不合并。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;master分支&#34; loading=&#34;lazy&#34; src=&#34;https://cdn.nlark.com/yuque/0/2025/png/35455497/1749539098077-070e0205-c25e-4633-a563-906fe8f232ef.png&#34;&gt;&lt;img alt=&#34;featues分支&#34; loading=&#34;lazy&#34; src=&#34;https://cdn.nlark.com/yuque/0/2025/png/35455497/1749539115780-2b4bee79-98ad-48b4-809e-128939dd209b.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;操作步骤总结&#34;&gt;操作步骤总结：&lt;/h3&gt;
&lt;p&gt;执行了以下 Git 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout master         # 切换到 master 分支
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git cherry-pick &amp;lt;commit-d&amp;gt;  # 将 features 分支中的提交 d 应用到当前分支
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;结果说明&#34;&gt;结果说明：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commit-d&lt;/code&gt; 的更改内容被&amp;quot;复制&amp;quot;到了 &lt;code&gt;master&lt;/code&gt; 分支上，作为一个新的提交（SHA 值不同）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit-e&lt;/code&gt; 不会被合并到 &lt;code&gt;master&lt;/code&gt;，除非你再次执行 cherry-pick 或 merge。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; 分支本身没有改变，仍然包含 &lt;code&gt;d&lt;/code&gt; 和 &lt;code&gt;e&lt;/code&gt; 提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.nlark.com/yuque/0/2025/png/35455497/1749539192042-398bef88-5a02-49ec-865b-ad52406b33b9.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git误操作reset恢复方法</title>
      <link>https://eightyoliveira.github.io/git/git%E8%AF%AF%E6%93%8D%E4%BD%9Creset%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/git/git%E8%AF%AF%E6%93%8D%E4%BD%9Creset%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/</guid>
      <description></description>
    </item>
  </channel>
</rss>
