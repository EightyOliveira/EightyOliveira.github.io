<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Others on Home</title>
    <link>https://eightyoliveira.github.io/other/</link>
    <description>Recent content in Others on Home</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 04 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://eightyoliveira.github.io/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 撤回已 push 的注意事项</title>
      <link>https://eightyoliveira.github.io/other/git%E6%92%A4%E5%9B%9E%E5%B7%B2push%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/git%E6%92%A4%E5%9B%9E%E5%B7%B2push%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>&lt;h1 id=&#34;1-通过git-revert&#34;&gt;1 通过git revert&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;适合提交已经被推送到远程分支，适合公共分支，需要保留项目历史记录以便追踪问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果其他人已经拉取了你要撤销的提交，请优先使用 &lt;code&gt;git revert&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-通过git-reset&#34;&gt;2 通过git reset&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;会重写提交历史，特别是在使用 &lt;code&gt;--hard&lt;/code&gt; 或 &lt;code&gt;--force&lt;/code&gt; 参数时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你执行了 &lt;code&gt;git push --force&lt;/code&gt;，可能会覆盖远程分支的历史，影响其他协作者。不适合用于已经推送到远程仓库并被他人拉取的提交。该命令适用于提交仅存在于本地，尚未推送到远程仓库的情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-注意事项&#34;&gt;3 注意事项&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在进行本地调试或清理提交历史时（如 rebase 后）可以使用。&lt;/li&gt;
&lt;li&gt;在执行任何撤销操作前，建议先创建一个新分支或备份当前状态。&lt;/li&gt;
&lt;li&gt;创建临时分支进行测试。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git reset四种模式对比</title>
      <link>https://eightyoliveira.github.io/other/git%E4%B8%ADreset%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94softmixedhardkeep/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/git%E4%B8%ADreset%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94softmixedhardkeep/</guid>
      <description>&lt;h1 id=&#34;1-reset-对比表&#34;&gt;1 reset 对比表&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模式（Mode）&lt;/th&gt;
          &lt;th&gt;工作区（Working Directory）&lt;/th&gt;
          &lt;th&gt;暂存区（Staging Area / Index）&lt;/th&gt;
          &lt;th&gt;本地版本库（HEAD）&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--soft&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;不修改&lt;/td&gt;
          &lt;td&gt;不修改&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;只移动 HEAD 指针，不改变暂存区和工作区。适合撤销提交但保留所有更改为已暂存状态。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--mixed&lt;/code&gt;（默认）&lt;/td&gt;
          &lt;td&gt;不修改&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;移动 HEAD 并重置暂存区，但不改变工作区。这是默认行为，适合撤销提交并取消暂存更改，但保留文件内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--hard&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;回退（仅已追踪文件）&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;完全丢弃更改，将 HEAD、暂存区和工作区都恢复到指定提交的状态。&lt;strong&gt;危险操作，会丢失未提交的修改！&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--keep&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;保留 Untracked 文件，回退已追踪文件&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;回退&lt;/td&gt;
          &lt;td&gt;类似于 &lt;code&gt;--hard&lt;/code&gt;，但不会删除工作区中未被追踪的文件（Untracked）。适用于想保留新添加的文件但丢弃旧更改。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;2-说明&#34;&gt;2 说明&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作区（Working Directory）&lt;/strong&gt;&lt;br&gt;
当前你在文件系统中看到的文件状态，也就是你正在编辑的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;暂存区（Staging Area / Index）&lt;/strong&gt;&lt;br&gt;
准备下一次提交的文件快照，通过 &lt;code&gt;git add&lt;/code&gt; 添加到暂存区的更改才会被下次提交包含。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地版本库（Local Repository / HEAD）&lt;/strong&gt;&lt;br&gt;
Git 存储的所有提交历史记录，HEAD 指向当前所在的提交。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-建议&#34;&gt;3 建议&lt;/h1&gt;
&lt;h2 id=&#34;31--git-reset---soft-head1&#34;&gt;3.1  &lt;code&gt;git reset --soft HEAD~1&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用场景：撤销最近的一次提交，但保留所有更改为“已暂存”状态。&lt;/li&gt;
&lt;li&gt;结果：HEAD 被移动，但工作区和暂存区不变。&lt;/li&gt;
&lt;li&gt;适用：提交后发现信息写错了，但不想重新添加文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32--git-reset---mixed-head1-或-git-reset-head1&#34;&gt;3.2  &lt;code&gt;git reset --mixed HEAD~1&lt;/code&gt; 或 &lt;code&gt;git reset HEAD~1&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用场景：撤销提交并将更改从暂存区移除（但保留在工作区中）。&lt;/li&gt;
&lt;li&gt;结果：HEAD 和暂存区被重置，工作区保持不变。&lt;/li&gt;
&lt;li&gt;注意：这是默认行为，无需加 &lt;code&gt;--mixed&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-git-reset---hard-head1&#34;&gt;3.3 &lt;code&gt;git reset --hard HEAD~1&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用场景：彻底丢弃最近一次提交的所有更改。&lt;/li&gt;
&lt;li&gt;结果：HEAD、暂存区和工作区都被重置到上一个提交的状态。&lt;/li&gt;
&lt;li&gt;注意：所有未提交的更改都会被永久删除！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;34-git-reset---keep-head1&#34;&gt;3.4 &lt;code&gt;git reset --keep HEAD~1&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用场景：想丢弃最近一次提交的更改，但保留工作区中新增的未追踪文件。&lt;/li&gt;
&lt;li&gt;结果：HEAD 和暂存区被重置，已追踪文件被还原，但未追踪文件保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-总结&#34;&gt;4 总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt;：只改 HEAD，什么都不动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed&lt;/code&gt;：改 HEAD 和暂存区，工作区不动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt;：全部重置，包括工作区（危险！）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--keep&lt;/code&gt;：类似 &lt;code&gt;hard&lt;/code&gt;，但不删未追踪文件。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git中cherry-pick用法</title>
      <link>https://eightyoliveira.github.io/other/git%E4%B8%ADcherry-pick%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/git%E4%B8%ADcherry-pick%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;1-介绍&#34;&gt;1 介绍&lt;/h1&gt;
&lt;p&gt;目的是将 &lt;code&gt;features&lt;/code&gt; (d e提交)分支中的某个特定提交（比如提交 &lt;code&gt;d&lt;/code&gt;）合并到 &lt;code&gt;master&lt;/code&gt; 分支，而另一个提交（比如提交 &lt;code&gt;e&lt;/code&gt;）不合并。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;master分支&#34; loading=&#34;lazy&#34; src=&#34;img/1.png&#34;&gt;
&lt;img alt=&#34;features分支&#34; loading=&#34;lazy&#34; src=&#34;img/2.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-操作步骤总结&#34;&gt;2 操作步骤总结：&lt;/h1&gt;
&lt;p&gt;执行了以下 Git 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout master         # 切换到 master 分支
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git cherry-pick &amp;lt;commit-d&amp;gt;  # 将 features 分支中的提交 d 应用到当前分支
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;3-结果说明&#34;&gt;3 结果说明：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commit-d&lt;/code&gt; 的更改内容被&amp;quot;复制&amp;quot;到了 &lt;code&gt;master&lt;/code&gt; 分支上，作为一个新的提交（SHA 值不同）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit-e&lt;/code&gt; 不会被合并到 &lt;code&gt;master&lt;/code&gt;，除非你再次执行 cherry-pick 或 merge。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; 分支本身没有改变，仍然包含 &lt;code&gt;d&lt;/code&gt; 和 &lt;code&gt;e&lt;/code&gt; 提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;master分支&#34; loading=&#34;lazy&#34; src=&#34;img/3.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git中stage和Git中stash和IDEA的Shelve对比</title>
      <link>https://eightyoliveira.github.io/other/git%E4%B8%ADstage%E5%92%8Cgit%E4%B8%ADstash%E5%92%8Cidea%E7%9A%84shelve%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/git%E4%B8%ADstage%E5%92%8Cgit%E4%B8%ADstash%E5%92%8Cidea%E7%9A%84shelve%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;h1 id=&#34;1-对比&#34;&gt;1 对比&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性/功能&lt;/th&gt;
          &lt;th&gt;Git Stage (&lt;code&gt;git add&lt;/code&gt;)&lt;/th&gt;
          &lt;th&gt;Git Stash (&lt;code&gt;git stash&lt;/code&gt;)&lt;/th&gt;
          &lt;th&gt;IDEA Shelve&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;用途&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;将修改添加到暂存区，准备提交&lt;/td&gt;
          &lt;td&gt;暂时保存工作目录和暂存区的更改&lt;/td&gt;
          &lt;td&gt;暂时保存本地未提交的更改&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否持久化保存&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;否（只存在于暂存区中）&lt;/td&gt;
          &lt;td&gt;是（保存为一个 stash 记录）&lt;/td&gt;
          &lt;td&gt;是（保存在 &lt;code&gt;.idea/shelf/&lt;/code&gt; 目录下）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否需要提交历史&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;需要手动执行 &lt;code&gt;git commit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;可通过 &lt;code&gt;apply&lt;/code&gt; 或 &lt;code&gt;pop&lt;/code&gt; 恢复更改&lt;/td&gt;
          &lt;td&gt;可恢复并重新应用更改&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否支持多个更改集合&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;否（一次 stage 对应一次提交）&lt;/td&gt;
          &lt;td&gt;是（可以有多个 stash 条目）&lt;/td&gt;
          &lt;td&gt;是（可保存多个 shelved 更改集）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否影响 Git 状态&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;是（改变暂存区状态）&lt;/td&gt;
          &lt;td&gt;是（保存后工作区变干净）&lt;/td&gt;
          &lt;td&gt;否（不影响 Git 状态，IDE 自定义机制）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;准备提交特定文件或代码片段&lt;/td&gt;
          &lt;td&gt;切换分支前临时保存改动&lt;/td&gt;
          &lt;td&gt;想保留当前未完成的工作以便稍后再继续&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;是否能部分操作&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;是（可选择性添加某些文件或代码块）&lt;/td&gt;
          &lt;td&gt;是（可通过 patch 操作）&lt;/td&gt;
          &lt;td&gt;是（可选择性地 shelve 部分更改）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;恢复方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提交后自动恢复&lt;/td&gt;
          &lt;td&gt;使用 &lt;code&gt;git stash apply&lt;/code&gt; 或 &lt;code&gt;pop&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在 IDEA 中点击 &amp;ldquo;Unshelve&amp;rdquo; 恢复更改&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;2-总结建议&#34;&gt;2 总结建议：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Git Stage：用于准备提交内容，是 Git 提交流程的一部分。&lt;/li&gt;
&lt;li&gt;Git Stash：适合开发者在命令行环境下快速保存和恢复工作状态。&lt;/li&gt;
&lt;li&gt;IDEA Shelve：适合在 IDEA 中进行复杂的开发任务切换。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git误操作reset恢复方法</title>
      <link>https://eightyoliveira.github.io/other/git%E8%AF%AF%E6%93%8D%E4%BD%9Creset%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/git%E8%AF%AF%E6%93%8D%E4%BD%9Creset%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/</guid>
      <description>&lt;h1 id=&#34;1-问题背景&#34;&gt;1 问题背景&lt;/h1&gt;
&lt;p&gt;git reset 命令（尤其是 git reset &amp;ndash;hard）可能会误删提交或修改，如何恢复。&lt;/p&gt;
&lt;h1 id=&#34;2-恢复步骤&#34;&gt;2 恢复步骤&lt;/h1&gt;
&lt;h2 id=&#34;21-git-reflog&#34;&gt;2.1 git reflog&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reflog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;abc1234 HEAD@{0}: reset: moving to HEAD~1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;def5678 HEAD@{1}: commit: featues a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xyz9012 HEAD@{2}: commit: featues b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-找到commit&#34;&gt;2.2 找到commit&lt;/h2&gt;
&lt;p&gt;在 reflog 输出中，找到 reset 操作之前的提交哈希（如 def5678）。&lt;/p&gt;
&lt;h2 id=&#34;23-恢复到目标提交&#34;&gt;2.3 恢复到目标提交&lt;/h2&gt;
&lt;p&gt;使用 reset 命令恢复到目标提交：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reset --hard def5678
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时工作区和 HEAD 会恢复到指定提交的状态。&lt;/p&gt;
&lt;h1 id=&#34;3-建议&#34;&gt;3 建议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;避免直接使用 git reset &amp;ndash;hard（慎用），可先用 git stash 保存更改。&lt;/li&gt;
&lt;li&gt;重要提交及时推送到远程仓库。&lt;/li&gt;
&lt;li&gt;定期备份或创建标签。&lt;/li&gt;
&lt;li&gt;git reflog 记录默认保存 90 天，超时后可能被清理。&lt;/li&gt;
&lt;li&gt;执行 git gc &amp;ndash;prune=now 会加速对象清理，增加恢复难度。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>curl www.baidu.com抓包分析</title>
      <link>https://eightyoliveira.github.io/other/curl-www.baidu.com%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 15 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/curl-www.baidu.com%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;1-获取baidu的ip地址&#34;&gt;1 获取baidu的ip地址&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ping www.baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;来自 157.148.69.80 的回复: 字节=32 时间=8ms TTL=53
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;来自 157.148.69.80 的回复: 字节=32 时间=14ms TTL=53
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-wireshark过滤-1571486980并访问baidu&#34;&gt;2 wireshark过滤 157.148.69.80并访问baidu&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcp and ip.addr== 157.148.69.80
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl www.baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-tcp头内容&#34;&gt;3 TCP头内容&lt;/h1&gt;
&lt;p&gt;TCP 首部包含以下内容，请留意其中的控制位，在三次握手和四次挥手过程中会频繁出现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口号 (Source Port and Destination Port)：每个 TCP 报文段都包含源端和目的端的端口号，用于寻找发送端和接收端应用进程。这两个值加上
IP 首部中的源端 IP 地址和目的端 IP 地址就可以确定一个唯一的 TCP 连接。&lt;/li&gt;
&lt;li&gt;序号 (Sequence Number)：这个字段的主要作用是用于将失序的数据重新排列。TCP 会隐式地对字节流中的每个字节进行编号，而 TCP
报文段的序号被设置为其数据部分的第一个字节的编号。序号是 32 bit 的无符号数，取值范围是0到 232 - 1。&lt;/li&gt;
&lt;li&gt;确认序号 (Acknowledgment Number)：接收方在接受到数据后，会回复确认报文，其中包含确认序号，作用就是告诉发送方自己接收到了哪些数据，下一次数据从哪里开始发，因此，确认序号应当是上次已成功收到数据字节序号加
1。只有 ACK 标志为 1 时确认序号字段才有效。&lt;/li&gt;
&lt;li&gt;首部长度 (Header Length)：首部中的选项部分的长度是可变的，因此首部的长度也是可变的，所以需要这个字段来明确表示首部的长度，这个字段占
4 bit，4 位的二进制数最大可以表示 15，而首部长度是以 4 个字节为一个单位的，因此首部最大长度是 15 * 4 = 60 字节。&lt;/li&gt;
&lt;li&gt;保留字段 (Reserved)：占 6 位，未来可能有具体用途，目前默认值为0.&lt;/li&gt;
&lt;li&gt;控制位 (Control Bits)：在三次握手和四次挥手中会经常看到 SYN、ACK 和 FIN 的身影，一共有 6 个标志位，它们表示的意义如下：
&lt;ul&gt;
&lt;li&gt;URG (Urgent Bit)：值为 1 时，紧急指针生效&lt;/li&gt;
&lt;li&gt;ACK (Acknowledgment Bit)：值为 1 时，确认序号生效&lt;/li&gt;
&lt;li&gt;PSH (Push Bit)：接收方应尽快将这个报文段交给应用层&lt;/li&gt;
&lt;li&gt;RST (Reset Bit)：发送端遇到问题，想要重建连接&lt;/li&gt;
&lt;li&gt;SYN (Synchronize Bit)：同步序号，用于发起一个连接&lt;/li&gt;
&lt;li&gt;FIN (Finish Bit)：发送端要求关闭连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;窗口大小 (Window)： TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。窗口大小是一个
16 bit 字段，单位是字节， 因而窗口大小最大为 65535 字节。&lt;/li&gt;
&lt;li&gt;检验和 (Checksum)：功能类似于数字签名，用于验证数据完整性，也就是确保数据未被修改。检验和覆盖了整个 TCP 报文段，包括 TCP
首部和 TCP 数据，发送端根据特定算法对整个报文段计算出一个检验和，接收端会进行计算并验证。&lt;/li&gt;
&lt;li&gt;紧急指针 (Urgent Pointer)：当 URG 控制位值为 1 时，此字段生效，紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。
TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。&lt;/li&gt;
&lt;li&gt;选项 (Options)：这一部分是可选字段，也就是非必须字段，最常见的可选字段是“最长报文大小 (MSS，Maximum Segment Size)”。&lt;/li&gt;
&lt;li&gt;有效数据部分 (Data)：这部分也不是必须的，比如在建立和关闭 TCP 连接的阶段，双方交换的报文段就只包含 TCP 首部。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-请求分析&#34;&gt;4 请求分析&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/img_14.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>C线程同步机制</title>
      <link>https://eightyoliveira.github.io/other/c%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/c%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;1-mutex&#34;&gt;1 mutex&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;互斥锁确保同一时刻只有一个线程可以访问临界区。&lt;/li&gt;
&lt;li&gt;经典场景：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-condition_variable&#34;&gt;2 condition_variable&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;条件变量用于线程间通信，允许线程在某个条件不满足时挂起，直到被其他线程通知。&lt;/li&gt;
&lt;li&gt;经典场景：阻塞队列的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-semaphores&#34;&gt;3 semaphores&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;计数型同步机制，维护一个计数器，表示可用资源数量。&lt;/li&gt;
&lt;li&gt;经典场景：资源池管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-r_w_lock&#34;&gt;4 r_w_lock&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;读操作和写操作的锁机制。&lt;/li&gt;
&lt;li&gt;经典场景：配置管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-span_lock&#34;&gt;5 span_lock&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;优点：避免线程切换，适合锁持有时间极短的场景&lt;/li&gt;
&lt;li&gt;缺点：浪费CPU资源，不适合长时间持有&lt;/li&gt;
&lt;li&gt;经典场景：略&lt;/li&gt;
&lt;li&gt;经典实现：Java中synchronized实现，锁升级&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>c/c&#43;&#43; vla and const</title>
      <link>https://eightyoliveira.github.io/other/c_c&#43;&#43;vlaandconst/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/c_c&#43;&#43;vlaandconst/</guid>
      <description></description>
    </item>
    <item>
      <title>JIT和AOT</title>
      <link>https://eightyoliveira.github.io/other/jit%E5%92%8Caot/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/jit%E5%92%8Caot/</guid>
      <description>&lt;h1 id=&#34;1-编译型语言和解释型语言&#34;&gt;1 编译型语言和解释型语言&lt;/h1&gt;
&lt;p&gt;编程语言主要分两大类，编译型语言，例如C/C++、Go，解释型语言例如Python。特例 CINT、GraalVM。&lt;/p&gt;
&lt;p&gt;编译型语言，将一门语言编译为可执行文件，可执行文件是OS和硬件高度绑定的机器码，特点是快。&lt;/p&gt;
&lt;p&gt;解释型语言，则直接将语言编写的程序在解释器上，机器上面有自己解释器，每次运行时逐行翻译成机器码进行运行，每次运行通过运行，特点是跨平台等。&lt;/p&gt;
&lt;h1 id=&#34;2-jit和aot&#34;&gt;2 JIT和AOT&lt;/h1&gt;
&lt;p&gt;AOT 编译是在程序运行之前将整个源代码或字节码文件一次性地编译成本地机器码。这意味着在程序运行时不需要再进行额外的编译工作，直接执行已经编译好的机器码。&lt;/p&gt;
&lt;p&gt;JIT 编译适用于对执行性能要求较高、灵活性要求较高的应用场景。例如，Java 虚拟机使用 JIT 编译器将热点代码即时编译成机器码，以提高程序的执行效率。JIT 编译还可以根据实际的执行情况进行优化，使得程序在后续的执行中获得更好的性能。&lt;/p&gt;
&lt;p&gt;实际上 JIT是解释型语言中，为了优化性能，在程序运行时，将热点代码进行编译机器码，从而不需要每次进行解释，这里实际开发过程中可以通过预热方式，提高程序运行性能，java HotSpot为例，其中存在c1 c2两个编译器，默认c2也就是server。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IO篇上 (Linux I/O模型)</title>
      <link>https://eightyoliveira.github.io/other/io%E7%AF%87%E4%B8%8Alinuxi_o%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/io%E7%AF%87%E4%B8%8Alinuxi_o%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt;网络数据流向方式，以数据接收方来看，从网卡-&amp;gt;内核-&amp;gt;用户空间，数据经过两次复制（相关资料 零拷贝）&lt;/p&gt;
&lt;h1 id=&#34;1bio&#34;&gt;1BIO&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/img.png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAX_SIZE 512
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 10007
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sock_fd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; recvnum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; addrlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in my_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[MAX_SIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 填充服务器端的数据，用于套接字绑定
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bzero&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;my_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    my_addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;   &lt;span style=&#34;color:#75715e&#34;&gt;// 设置为IPV4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    my_addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htons&lt;/span&gt;(PORT); &lt;span style=&#34;color:#75715e&#34;&gt;// 将端口号主机序转换为网络序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    my_addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_addr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 创建套接字
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;create socket error!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 绑定套接字
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;my_addr, addrlen) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bind error!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 监听端口和ip，设置最大连接数为3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listen error!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 建立服务器端和客户端连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sock_fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addrlen);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 建立连接后，产生新的套接字
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sock_fd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept error!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 接收数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((recvnum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(sock_fd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf, MAX_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recv error!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    buf[recvnum] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recv from client: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, MAX_SIZE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 关闭连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sock_fd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;单线程方式，从accept建立连接到recv发起系统调用之后，整个线程在事件完成之前会一直阻塞住。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IO篇下 (基于Linux64 OpenJDK8)</title>
      <link>https://eightyoliveira.github.io/other/io%E7%AF%87%E4%B8%8B%E5%9F%BA%E4%BA%8Elinux64openjdk8/</link>
      <pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://eightyoliveira.github.io/other/io%E7%AF%87%E4%B8%8B%E5%9F%BA%E4%BA%8Elinux64openjdk8/</guid>
      <description>&lt;p&gt;Java下NIO包是new io！！！&lt;/p&gt;
&lt;h1 id=&#34;1-传统阻塞模式&#34;&gt;1 传统阻塞模式&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;(32);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ServerSocketChannel serverChannel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    serverChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    serverChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InetSocketAddress(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, 8080));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SocketChannel sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serverChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connected... &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;sc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全程阻塞住，从accept到read，单线程，略。&lt;/p&gt;
&lt;h1 id=&#34;2-非阻塞模式&#34;&gt;2 非阻塞模式&lt;/h1&gt;
&lt;p&gt;重点:serverSocketChannel.configureBlocking(false);&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;(16);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ServerSocketChannel ssc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InetSocketAddress(8080));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SocketChannel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; channels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SocketChannel sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connected... &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;sc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 非阻塞模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            channels.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(sc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (SocketChannel channel : channels) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; read &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (read &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;flip&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;after read...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;channel);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重点分析，首先其他不变，不使用selector，直接serverSocketChannel.configureBlocking(false);这种模式调用关系，关键包sun.nio.ch.ServerSocketChannelImpl.accept()方法&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
